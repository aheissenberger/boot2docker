#!/usr/bin/env sh

#Load the user's profile and then default any remaining values
BOOT2DOCKER_CFG_DIR=${HOME}/.boot2docker
BOOT2DOCKER_PROFILE=${BOOT2DOCKER_CFG_DIR}/profile
test -f "$BOOT2DOCKER_PROFILE" && . "$BOOT2DOCKER_PROFILE"
: ${VM_NAME:=boot2docker-vm}
: ${VBM:=VBoxManage}

: ${DOCKER_PORT:=4243}
: ${SSH_HOST_PORT:=2022}

: ${VM_DISK_SIZE:=40000}
: ${VM_MEM:=1024}

: ${VM_DISK:=${BOOT2DOCKER_CFG_DIR}/${VM_NAME}.vmdk}
: ${BOOT2DOCKER_ISO:=${BOOT2DOCKER_CFG_DIR}/boot2docker.iso}

: ${BOOT2DOCKER_HOST_IP:=192.168.59.1}
: ${BOOT2DOCKER_DHCP_IP:=192.168.59.100}
: ${BOOT2DOCKER_NetworkMask:=255.255.255.0}
: ${BOOT2DOCKER_lowerIPAddress:=192.168.59.101}
: ${BOOT2DOCKER_upperIPAddress:=192.168.59.254}
: ${BOOT2DOCKER_DHCP_Enabled:=Yes}

# Shared folder type [nfs|sshfs]
: ${BOOT2DOCKER_SHAREDFOLDER_type:=sshfs}

#Check if all required commands exist
cmd_exists() {
    while [ -n "$1" ]
    do
        command -v $1 >/dev/null 2>&1 || { echo >&2 "command '$1' is required but not installed.  Aborting."; notOK=1; }
        shift
    done
    [ -n "$notOK" ] && exit 1
}
cmd_exists nc curl grep head tr $VBM

mkdir -p "${BOOT2DOCKER_CFG_DIR}"

IFS=. read -r i1 i2 i3 i4 <<< "$BOOT2DOCKER_HOST_IP"
IFS=. read -r m1 m2 m3 m4 <<< "$BOOT2DOCKER_NetworkMask"
BOOT2DOCKER_Network=$(printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))")
unset IFS

get_latest_release_name() {
    local LRN
    LRN=$(curl 'https://api.github.com/repos/steeve/boot2docker/releases' 2>/dev/null|grep -o -m 1 -e "\"tag_name\":[[:space:]]*\"[a-z0-9.]*\""|head -1|cut -d: -f2|tr -d ' "')
    if [ -z "$LRN" ]; then
        echo "ERROR"
    else
        echo "$LRN"
    fi
}

download_latest() {
    LATEST_RELEASE=$(get_latest_release_name)
    if [ ! "$LATEST_RELEASE" = "ERROR" ]; then
        log "Latest version is $LATEST_RELEASE, downloading..."
        mkdir -p "${BOOT2DOCKER_ISO%/*}"
        curl -L -o "$BOOT2DOCKER_ISO" "https://github.com/steeve/boot2docker/releases/download/$LATEST_RELEASE/boot2docker.iso"
        log "Done"
    else
        log "Could not get lastest release name! Cannot download boot2docker.iso."
    fi
}

log() {
    echo "[`date +"%Y-%m-%d %H:%M:%S"`] ${*}"
}

get_hostonlyif_name() {
    DS=""
    $VBM list hostonlyifs | while read LINE; do
        if [ -z "$LINE" ]; then
            if [[ $DS =~ (.*),.*,.*,$BOOT2DOCKER_HOST_IP,$BOOT2DOCKER_NetworkMask,.* ]]; then
                IFNAME="${BASH_REMATCH[1]}"
                if [[ "$IFNAME" == "$(get_dhcpserver_name $IFNAME)" ]]; then
                    echo "$IFNAME"
                    return 0
                else
                    log "Found interface \"$IFNAME\" with wrong DHCP Settings!"
                    echo "$IFNAME" 
                    return 1
                fi
            fi
            DS=""
        else
            if [[ $LINE =~ .*:[[:space:]]+(.*) ]]; then
                if [ -n "$DS" ]; then
                    DS="$DS,"
                fi
                DS="$DS${BASH_REMATCH[1]}"
            fi
        fi
    done
}

get_dhcpserver_name() {
    IFNAME="$1"
    DS=""
    $VBM list dhcpservers | while read LINE; do
        if [ -z "$LINE" ]; then
            if [[ $DS =~ HostInterfaceNetworking-$IFNAME,$BOOT2DOCKER_DHCP_IP,$BOOT2DOCKER_NetworkMask,$BOOT2DOCKER_lowerIPAddress,$BOOT2DOCKER_upperIPAddress,$BOOT2DOCKER_DHCP_Enabled ]]; then
                echo "$IFNAME"
                break
            fi
            DS=""
        else
            if [[ $LINE =~ .*:[[:space:]]+(.*) ]]; then
                if [ -n "$DS" ]; then
                    DS="$DS,"
                fi
                DS="$DS${BASH_REMATCH[1]}"
            fi
        fi
    done 
}

create_hostonlyif() {
    IFNAME=$(get_hostonlyif_name)
    IFNAME_ERROR=$?
    if [[ "$IFNAME_ERROR" == "1" ]]; then # Wrong DHCP Setting
        echo "Found interface \"$IFNAME\" with wrong DHCP settings!"
        if ask "Would you like to reset it? (Y/N) " N ; then
            $VBM dhcpserver modify \
                --ifname $IFNAME \
                --ip $BOOT2DOCKER_DHCP_IP \
                --netmask $BOOT2DOCKER_NetworkMask \
                --lowerip $BOOT2DOCKER_lowerIPAddress \
                --upperip $BOOT2DOCKER_upperIPAddress \
                --enable
        else
            log "Failed to update host only interface with DHCP settings!"
            exit 1
        fi
    fi
    if [[ -z "$IFNAME" ]]; then
        OUTPUT=$($VBM hostonlyif create)
        if [[ $OUTPUT =~ Interface[[:space:]]\'(.*)\'.* ]]; then
            IFNAME="${BASH_REMATCH[1]}"
            $VBM hostonlyif ipconfig $IFNAME \
                --ip $BOOT2DOCKER_HOST_IP \
                --netmask $BOOT2DOCKER_NetworkMask
        else
            log "Failed to create host only interface!"
            exit 1
        fi
        $VBM dhcpserver add \
            --ifname $IFNAME \
            --ip $BOOT2DOCKER_DHCP_IP \
            --netmask $BOOT2DOCKER_NetworkMask \
            --lowerip $BOOT2DOCKER_lowerIPAddress \
            --upperip $BOOT2DOCKER_upperIPAddress \
            --enable
    fi
    echo "$IFNAME"
}

ask() {
    while true; do
 
        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi
 
        # Ask the question
        read -p "$1 [$prompt] " REPLY
 
        # Default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi
 
        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac
 
    done
}

init() {

    if `$VBM showvminfo $VM_NAME > /dev/null 2>&1`; then
	    echo "$VM_NAME Virtual Box vm already exists"
	    exit 1
    fi

    VM_OSTYPE=Linux26_64
    VM_NIC=virtio
    unamestr=`uname`
    case $unamestr in
        Linux) VM_CPUS=`nproc`;;
        Darwin) VM_CPUS=`sysctl -n hw.physicalcpu`;;
        *) echo "$unamestr not yet supported - please raise an issue" ; exit 1
    esac

    if `nc -z -w2 localhost $DOCKER_PORT > /dev/null` ; then
        log "DOCKER_PORT=$DOCKER_PORT on localhost is used by an other process! Set the DOCKER_PORT in $BOOT2DOCKER_PROFILE free port."
        exit 1
    fi

    if `nc -z -w2 localhost $SSH_HOST_PORT > /dev/null` ; then
        log "SSH_HOST_PORT=$SSH_HOST_PORT on localhost is used by an other process! Set the SSH_HOST_PORT in $BOOT2DOCKER_PROFILE free port."
        exit 1
    fi

    log "Creating VM $VM_NAME"
    $VBM createvm --name $VM_NAME --register

    log "Setting VM settings"
    TXUX_SUPPORT=""
    if $($VBM modifyvm|grep -q "\-\-vtxux"); then
        TXUX_SUPPORT="--vtxux on"
    fi

    if ! $VBM modifyvm $VM_NAME \
        --ostype $VM_OSTYPE \
        --cpus $VM_CPUS \
        --memory $VM_MEM \
        --rtcuseutc on \
        --acpi on \
        --ioapic on \
        --hpet on \
        --hwvirtex on \
        --vtxvpid on \
        $TXUX_SUPPORT \
        --largepages on \
        --nestedpaging on \
        --firmware bios \
        --bioslogofadein off --bioslogofadeout off --bioslogodisplaytime 0 --biosbootmenu disabled \
        --boot1 dvd; then
      echo "An error occured, upgrade VirtualBox or try to disable some options"
      delete
      exit 1
    fi

    log "Setting VM networking"
    $VBM modifyvm $VM_NAME \
        --nic1 nat \
        --nictype1 $VM_NIC \
        --cableconnected1 on
    if `$VBM showvminfo $VM_NAME | grep Rule | grep ssh > /dev/null`; then
	    $VBM modifyvm $VM_NAME \
        	--natpf1 delete "ssh"
    fi
    if `$VBM showvminfo $VM_NAME | grep Rule | grep docker > /dev/null`; then
	    $VBM modifyvm $VM_NAME \
        	--natpf1 delete "docker"
    fi
    IFNAME2=$(create_hostonlyif)
    $VBM modifyvm $VM_NAME \
        --nic2 hostonly \
        --hostonlyadapter2 $IFNAME2 \
        --nictype2 $VM_NIC \
        --cableconnected2 on
    $VBM modifyvm $VM_NAME \
        --natpf1 "ssh,tcp,127.0.0.1,$SSH_HOST_PORT,,22" \
        --natpf1 "docker,tcp,127.0.0.1,$DOCKER_PORT,,4243"

    if [ ! -e "$BOOT2DOCKER_ISO" ]; then
        log "boot2docker.iso not found."
        download_latest
    fi

    log "Setting VM disks"
    if `$VBM showvminfo $VM_NAME | grep SATA > /dev/null`; then
        $VBM storagectl $VM_NAME --name "SATA" --remove
    fi

    if [ ! -e "$VM_DISK" ]; then
        log "Creating $VM_DISK_SIZE Meg hard drive..."
        # closemedium may complain when not needed
        mkdir -p "${VM_DISK%/*}"
        $VBM closemedium disk "$VM_DISK" > /dev/null 2>&1
        ## make a simple text file, and use that as the flag to say 'format me'
        $VBM createhd --format VMDK --filename "$VM_DISK" --size $VM_DISK_SIZE

        echo "boot2docker, please format-me" | cat - /dev/zero | head -c 5242880 > format-flag.txt # 5M
        $VBM convertfromraw format-flag.txt format-flag.vmdk --format VMDK
        $VBM clonehd format-flag.vmdk "$VM_DISK" --existing
        $VBM closemedium disk format-flag.vmdk > /dev/null 2>&1 && rm format-flag.txt format-flag.vmdk
    fi

    $VBM storagectl $VM_NAME --name "SATA" --add sata --hostiocache on
    $VBM storageattach $VM_NAME --storagectl "SATA" --port 0 --device 0 --type dvddrive --medium "$BOOT2DOCKER_ISO"
    $VBM storageattach $VM_NAME --storagectl "SATA" --port 1 --device 0 --type hdd --medium "$VM_DISK"

    log "Done."
    log "You can now type boot2docker up and wait for the VM to start."
}

do_ssh() {
    is_installed || status
pkfile=`mktemp -t b2d`
umask 077
echo "-----BEGIN DSA PRIVATE KEY-----
MIIBvAIBAAKBgQCjs5tqiAMPBoRF9jUhytG1dVwDxVKH9U2tnmOCvIyZ7RVYrbw3
HqP1yGdhmua9DKpExJqTlIq/xosWqAeRZDHm9t0mFT1oW+fJytfF1LFeNujDdOIa
dE+Uh+gKqSQef0DXbdFRc7JdrG5FLriihb2r/PmrYNqAZhfnXfAZ6YZgcQIVAMlB
CZdlBCOclnLEpTWWOoDduYh5AoGBAJ3aG2EtKbJt65Jt49C3Q3v1vI/ETJ0409P6
XIjFk2p0IWOzIiLSPI4zMSkWl9bCwFcyhEN4Ngk+TSmIsamlheCpsM6tEmeHxhBn
BvV7a95IjTyiKBG+2kweMQapehpBvSnsH7/WpXNPxLhfZNq+q6vjZbPQvZ4lhqEA
7OilShIVAoGAAv8Px1V4tCJwPxnge+PTddeRNhD0Lwd6OpaKMo55u3qxpM+77M8q
84UpaNaX3dyKOHEVvoh4DvLEnAr9cPbZDG/pC39dsw8kOS/88sR+WGyu1hc05vyU
Ba8g4DSLDLFodM9KOOr33xpzISRYp0y6eyWCDlu+JE7+0kOBWMqqVicCFQCuBDEP
GcQgE6LgrKBC9bbzsgHq/w==
-----END DSA PRIVATE KEY-----
" > $pkfile
ssh -i $pkfile -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p $SSH_HOST_PORT docker@localhost $*
rm $pkfile
}

start() {
    is_installed || status
    if ! is_running; then
        if is_paused; then
            log "Resuming $VM_NAME"
            $VBM controlvm $VM_NAME resume > /dev/null
            wait_vm
            log "Resumed."
        else
            log "Starting $VM_NAME..."
            $VBM startvm $VM_NAME --type headless > /dev/null &
            wait_vm
            log "Started."
        fi
    else
        log "$VM_NAME is already running."
    fi
}

wait_vm() {
    while ! echo "ping" | nc localhost $SSH_HOST_PORT > /dev/null; do
        sleep 1
    done
}

suspend() {
    is_installed || status
    if is_running; then
        log "Suspending $VM_NAME..."
        $VBM controlvm $VM_NAME savestate > /dev/null
    else
        log "$VM_NAME is not running."
    fi
}

stop() {
    is_installed || status
    if is_running; then
        log "Shutting down $VM_NAME..."
        $VBM controlvm $VM_NAME acpipowerbutton > /dev/null
        while is_running; do
            sleep 1
        done
    else
        log "$VM_NAME is not running."
    fi
}

restart() {
    is_installed || status
    if is_running; then
        stop && sleep 1 && start
    else
        start
    fi
}

info() {
    if is_installed; then
        $VBM showvminfo $VM_NAME
    else
        echo "$VM_NAME does not exist."
    fi
}

is_installed() {
    $VBM list vms | grep "$VM_NAME" > /dev/null
}

is_running() {
    info | grep "State:\s\+running" > /dev/null
}

is_paused() {
    info | grep "State:\s\+paused" > /dev/null
}

is_suspended() {
    info | grep "State:\s\+saved" > /dev/null
}

is_stopped() {
    info | grep "State:\s\+powered off" > /dev/null
}

is_aborted() {
    info | grep "State:\s\+aborted" > /dev/null
}

status() {
    if is_running; then
        log "$VM_NAME is running."
        exit 0
    elif is_paused; then
        log "$VM_NAME is paused."
        exit 1
    elif is_suspended; then
        log "$VM_NAME is suspended."
        exit 1
    elif is_stopped; then
        log "$VM_NAME is stopped."
        exit 1
    elif is_aborted; then
        log "$VM_NAME is aborted."
        exit 1
    else
        log "$VM_NAME does not exist."
        exit 1
    fi
}

delete() {
    if [ ! is_stopped ] || [ ! is_aborted ]; then
        log "$VM_NAME needs to be stopped to delete it."
        exit 1
    fi
    $VBM unregistervm --delete $VM_NAME
}

build() {
    if ! is_running; then
        log "$VM_NAME needs to be running to build a new ISO."
        exit 1
    fi
    if [ -n "$1" ]; then
        repo="$1"
    elif [ ! -f "./rootfs/Dockerfile" ]; then
        repo="git@github.com:steeve/boot2docker.git"
    fi
    if [ -n "$repo" ]; then
        log "Create TEMPDIR."
        builddir=$(mktemp -d -t b2d)
        pushd $builddir

        log "Download $repo."

        git clone $repo .

        # curl -o master.zip $repo
        # if [ ! -f "./master.zip" ]; then
        #     log "Download failed!"
        #     exit
        # fi   
        # unzip master.zip
        if [ ! -f "./rootfs/Dockerfile" ]; then
            log "No Repository to build!"
            exit
        fi  
    else
        log "Use local repository."
    fi

    log "Start build"
    docker pull steeve/boot2docker-base
    docker build -rm -t boot2docker rootfs/
    docker rm build-boot2docker  > /dev/null 2>&1

    docker run -privileged -name build-boot2docker boot2docker
    if [ -n "$repo" ]; then
        popd
        chmod -R 777 $builddir
        rm -R $builddir
    fi

    echo "wait for container to finish"
    docker wait build-boot2docker
 
    docker cp build-boot2docker:/boot2docker.iso .
    # ToDo: replace existing ISO
    echo "path to old ISO:"
    $VBM showvminfo $VM_NAME | grep boot2docker.iso
}

docker_cmd() {
    echo "CMD: $@"
    DCMD=$@
    if [[ $DCMD =~ [-]name[[:space:]]([a-zA-Z0-9_-]+) ]]; then
        CNAME=${BASH_REMATCH[1]}
        # echo "name: $CNAME"
    fi

    if [[ -n "$CNAME" ]] && [[ $DCMD =~ [-]v[[:space:]]([^:\ ]*):([^:\ ]*)(:ro|:rw){0,1} ]]; then
        MHD_ORIG=${BASH_REMATCH}
        MHD_HD_SHARE=$(cd ${BASH_REMATCH[1]}; pwd)
        MHD_HD_MOUNT=$(md5 -q -s "$MHD_HD_SHARE")
        MHD_HD_MOUNT="/var/lib/docker/share/$MHD_HD_MOUNT"
        MHD_OPTION="-v $MHD_HD_MOUNT:${BASH_REMATCH[2]}${BASH_REMATCH[3]}"
        CUGID=$(id)
        if [[ $CUGID =~ uid\=([0-9]+)\((.*)\)[[:space:]]gid\=([0-9]+) ]]; then
            MUID=${BASH_REMATCH[1]}
            MUNAME=${BASH_REMATCH[2]}
            MGID=${BASH_REMATCH[3]}
        else
            log "Could not get User ID"
            exit 1
        fi
        if [ "$BOOT2DOCKER_SHAREDFOLDER_type" == "nfs" ]; then
            log "nfs /etc/exports add $MHD_HD_SHARE"

            SHARE_ESCAPED="${MHD_HD_SHARE//\//\/}"
            MHD_HD_EXPORT_CMD="sudo sed -i.bak '/\"$SHARE_ESCAPED\"/d' /etc/exports; sudo echo \"\\\"$MHD_HD_SHARE\\\" -network $BOOT2DOCKER_Network -mask $BOOT2DOCKER_NetworkMask -alldirs -mapall=$MUID:$MGID\" >> /etc/exports; sudo nfsd update"
            unamestr=`uname`

            if [[ ! `sudo -v` ]] && [[ "$unamestr" == "Darwin" ]]; then
                MHD_HD_EXPORT_CMD_TMP=$(mktemp -t b2d)
                echo $MHD_HD_EXPORT_CMD > $MHD_HD_EXPORT_CMD_TMP
                osascript -e "do shell script \"sh $MHD_HD_EXPORT_CMD_TMP\" with administrator privileges"
                rm $MHD_HD_EXPORT_CMD_TMP
            else
                $MHD_HD_EXPORT_CMD
            fi
            log "mount $MHD_HD_SHARE to $MHD_HD_MOUNT"
            # sudo /bin/bash -c echo "\"$MHD_HD_SHARE\" -network 192.168.56.0 -mask 255.255.255.0 -alldirs -mapall=502:20" >> /etc/exports
            do_ssh "sudo mkdir -p $MHD_HD_MOUNT; sudo /usr/local/etc/init.d/nfs-client start; sudo mount $BOOT2DOCKER_HOST_IP:$MHD_HD_SHARE $MHD_HD_MOUNT"
        else
            do_ssh "sudo mkdir -p $MHD_HD_MOUNT; sudo tce-load -wi sshfs-fuse"
            do_ssh "sudo sshfs -o uid=0 -o gid=0 $MUNAME@$BOOT2DOCKER_HOST_IP:$MHD_HD_SHARE $MHD_HD_MOUNT"
        fi
        DCMD="${DCMD/$MHD_ORIG/$MHD_OPTION}"
    fi

    if [[ -n "$CNAME" ]] && [[ $DCMD =~ -p[[:space:]]([a-zA-Z0-9_\\-\\.]*):*([0-9]*):*([0-9]*)(/udp){0,1} ]]; then
        # echo $BASH_REMATCH      
        # echo ${BASH_REMATCH[1]} 
        # echo ${BASH_REMATCH[2]} 
        # echo ${BASH_REMATCH[3]} 
        # echo ${BASH_REMATCH[4]}
        PP0=$BASH_REMATCH
        PP1=${BASH_REMATCH[1]}
        PP2=${BASH_REMATCH[2]}
        PP3=${BASH_REMATCH[3]}
        PP4=${BASH_REMATCH[4]}
        if [[ $PP1 =~ [a-zA-Z0-9](-*[a-zA-Z0-9]+)*(\.[a-zA-Z0-9](-*[a-zA-Z0-9]+)*)+ ]]; then
            PB_HOST_IF=$PP1
            if [ "" == "$PP3" ]; then
                PB_CPORT=$PP2
            else
                PB_CPORT=$PP3
                PB_HPORT=$PP2
            fi
        else
            # echo "no IP"
            if [ "" == "$PP2" ]; then
                PB_CPORT=$PP1
            else
                PB_CPORT=$PP2
                PB_HPORT=$PP1
            fi
        fi
        PB_OPTION="-p 0.0.0.0::$PB_CPORT"
        if [ "" == "$PP4" ]; then
            PB_TYP=tcp
        else
            PB_TYP=udp
        fi
        # echo "$PB_HOST_IF:$PB_HPORT:$PB_CPORT"
        # echo "$PB_OPTION"
        DCMD="${DCMD/$PP0/$PB_OPTION}"
        echo "docker $DCMD"

        docker $DCMD
        # echo "docker port $CNAME $PB_CPORT"
        PBDYN=$(docker port $CNAME $PB_CPORT)
        # echo $PBDYN
        if [[ $PBDYN =~ ([a-zA-Z0-9_\\-\\.]*):*([0-9]*) ]]; then
            PB_VM_IF=${BASH_REMATCH[1]}
            # PB_VM_IF=""
            PB_DPORT=${BASH_REMATCH[2]}
            if [ "" == "$PB_HOST_IF" ]; then
                PB_HOST_IF="127.0.0.1"
            fi
            if [ "" == "$PB_HPORT" ]; then
                PB_HPORT=$PB_DPORT
            fi
            CFWPORTS=""
            CFWPORTS="$CFWPORTS natpf1 zfp$PB_HPORT,$PB_TYP,$PB_HOST_IF,$PB_HPORT,$PB_VM_IF,$PB_DPORT"
            #echo $CFWPORTS
            echo "$VBM controlvm $VM_NAME natpf1 delete zfp$PB_HPORT"
            echo "$VBM controlvm $VM_NAME $CFWPORTS"
            $VBM controlvm $VM_NAME setlinkstate1 off
            $VBM controlvm $VM_NAME natpf1 delete zfp$PB_HPORT  > /dev/null 2>&1
            $VBM controlvm $VM_NAME $CFWPORTS
            $VBM controlvm $VM_NAME setlinkstate1 on
        fi
    else
        echo "missed"
        docker $1
    fi
}

case $1 in
    init | setup) init;;
    start | up) start;;
    save | pause | suspend) suspend;;
    stop | halt | down) stop;;
    restart) restart;;
    status) status;;
    info) info;;
    delete) delete;;
    ssh) shift; do_ssh "$@";;
    download) download_latest;;
    build) shift; build $1;;
    cmd) shift; docker_cmd "$@";;
    *) echo "Usage $0 {init|start|up|save|pause|stop|restart|status|info|delete|ssh|download|build|cmd}"; exit 1
esac
